/*
 * generated by Xtext 2.15.0
 */
package org.xtext.compilateur.generator;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.xtext.compilateur.PyStandaloneSetup;
import org.xtext.compilateur.py.Affect;
import org.xtext.compilateur.py.Command;
import org.xtext.compilateur.py.Commands;
import org.xtext.compilateur.py.Definition;
import org.xtext.compilateur.py.Expr;
import org.xtext.compilateur.py.ExprCons;
import org.xtext.compilateur.py.ExprSimple;
import org.xtext.compilateur.py.FunctionP;
import org.xtext.compilateur.py.Input;
import org.xtext.compilateur.py.Nop;
import org.xtext.compilateur.py.Output;
import org.xtext.compilateur.py.Program;

import com.google.inject.Inject;
import com.google.inject.Provider;

public class Main {
	private static String inputFileName = "test_compilation_nop.wh";
	private static String outputFileName = "result_test_compilation_nop.txt";

	private static final String VAR_PREFIXE = "Var";
	private Map<String, FunctionDef> listFunction = new HashMap<String, FunctionDef>();
	private Map<String, String> symboles = new HashMap<String, String>();
	CodeIntermediaire codeI = new CodeIntermediaire();
	private static Main instance;
	
//	private Main() {
//		this.listFunction = new HashMap<String, FunctionDef>();
//		this.symboles = new HashMap<String, String>();
//		codeI = new CodeIntermediaire();
//	}
	/**
	 * Get the singleton instance of the GeneratorAddr
	 * @return The unique instance of the GeneratorAddr
	 */
	public static Main getInstance() {
		if (instance == null) {
			return new PyStandaloneSetup().createInjectorAndDoEMFRegistration().getInstance(Main.class);
		} else {
			return instance;
		}
	}

	public static void main(String[] args) {
		//		if (args.length == 0) {
		//			System.err.println("Aborting: no path to EMF resource provided!");
		//			return;
		//		}
		//		Injector injector = new PyStandaloneSetup().createInjectorAndDoEMFRegistration();
		//		Main main = injector.getInstance(Main.class);
		Main main = Main.getInstance();
		main.runGenerator(args);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String[] args) {
		if(args.length > 0) {
			createSymTable(args[0], args[1]);
		}
		else {
			createSymTable(inputFileName, outputFileName);
		}
//		// Load the resource
//		ResourceSet set = resourceSetProvider.get();
//		Resource resource = set.getResource(URI.createFileURI(string), true);
//
//		// Validate the resource
//		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
//		if (!list.isEmpty()) {
//			for (Issue issue : list) {
//				System.err.println(issue);
//			}
//			return;
//		}
//
//		// Configure and start the generator
//		fileAccess.setOutputPath("src-gen/");
//		GeneratorContext context = new GeneratorContext();
//		context.setCancelIndicator(CancelIndicator.NullImpl);
//		//generator.generate(resource, fileAccess, context);
//		//Initialisation du generator
//		PyGenerator pg = new PyGenerator();
//		pg.doGenerate(resource, fileAccess, context, outputFileName);
//		// Translator
//		Translator_Python translator = new Translator_Python(codeI);
//		translator.translate();
//		System.out.println(translator);
		System.out.println("Code generation finished.");
	}
	
	/**
	 * Initialise la liste des fonctions avec le nom des focntions déclarées
	 * @param prog
	 */
	private void discoverFunctions(Program prog) {
		for(FunctionP f : prog.getFunctions()) {
			String namef = f.getName();
			Definition def = f.getDefinition();
			boolean existFunction = listFunction.containsKey(namef);
			if(!existFunction) {
				FunctionDef defFun = new FunctionDef(namef);
				//TODO gestion de la duplication à faire 
				defFun.setInputCount(def.getInput().getVars().size());
				defFun.setOutputCount(def.getOutput().getVars().size());
				listFunction.put(namef, defFun);
			}
			
		}
	}

	public void createSymTable(String inputFilePath, String outputFilePath)
	//throws SymTableException, ThreeAddressCodeException, CS_TranslatorException 
	{
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createFileURI(inputFilePath), true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}

		TreeIterator<EObject> tree = resource.getAllContents();
		while (tree.hasNext()) {
			EObject next = tree.next(); //AST
			if (next instanceof Program) {
				discoverFunctions((Program) next); // Just read the function's names and inputs / outputs
				compile((Program) next); // Start to discover all the program
			}
		}

		//		checkSymbolsUsage(); // Check all the symbols usage
		//		if (DISPLAY_THREE_ADDR_CODE) {
		//			System.out.println(code3Addresses); // Print the 3@ code
		//		}
		//
		//		if(WARNINGS){
		//			System.out.println(checkVarUse());
		//		}

		// Translator
		System.out.println("Le code 3 : "+codeI);
		Translator_Python translator = new Translator_Python(codeI);
		translator.translate();

		//Printing on console
		//if (DISPLAY_SYM_TABLE) {
		displaySymTable(); 		// Print the symbols table
		//}
		//if (DISPLAY_TRANSLATION) {	// Print C# code generated
		System.out.println(translator);
		//}
		//if (PRINT_TRANSLATION) { 	// Write C# code generated in a file
		try (PrintWriter out = new PrintWriter(outputFilePath)) {
			out.println(translator.toString());
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}


	private void compile(Program prog) {
		for(FunctionP f : prog.getFunctions()) {
			compile(f);
		}
	}
	
	private void compile(FunctionP f) {
		String namef = f.getName();
		codeI.nouvelleEtiquette();
		codeI.fun(namef);
		compile(f.getDefinition(), listFunction.get(namef));
		codeI.finEtiquette();
	}
	private void compile(Definition d, FunctionDef f) {
		//Inputs
		compile(d.getInput(), f);
		compile(d.getCommands(), f);
		compile(d.getOutput(), f);
	}

	private void compile(Output out, FunctionDef f) {
		EList<String> vars = out.getVars();
		for(String v : vars) {
			codeI.write(v);
			f.updateWriteVar(v);
		}
	}
	private void compile(Input in, FunctionDef f) {
		EList<String> inputs = in.getVars();
		for(String i : inputs) {
			f.updateReadVar(i); //ajout à la table des variables
			codeI.read(i);
		}
	}

	private void  compile(Commands com, FunctionDef f) {
		EList<Command> comm = com.getCommands();
		for(Command c : comm) {
			compile(c , f);
		}

	}
	private void compile(Command com, FunctionDef f) {
		EObject obj = com.getCmd();
		if(obj instanceof Affect) {
			compile((Affect) obj, f);
		}
		else if(obj instanceof Nop) {
			codeI.nop();
		}
		//		else if(obj instanceof Affect)
		// TODO le reste des commandes
	}

	private boolean isSymbole(String str) {
		if (str == null || str.equals("nil")){ return false; }
		String firstChar = str.substring(0, 1);
		return firstChar.equals(firstChar.toLowerCase()); // Is lowercase ->
		// Symbole
	}

	private boolean isVariable(String str) {
		if (str == null){ return false;	}
		String firstChar = str.substring(0, 1);
		return firstChar.equals(firstChar.toUpperCase()); // Is uppercase -> Variable
	}

	/**
	 * Ajoute la variable v dans la table de variables locales si v n'existait pas avant
	 * @param f
	 * @param v
	 */
	public void varDeclaration3Addr(FunctionDef f, String v) {
		if(isVariable(v)){
			if (!f.alreadyExisting(v)) {
				if (!f.localVarAlreadyExisting(v)) {
					f.updateVars_local(v);
				}
			}
		}
	}

	private void compile(Affect aff, FunctionDef f) {
		EList<String> affs = aff.getVars(); //cote gauche
		EList<Expr> exprs = aff.getExprs(); // cote droit

		Iterator<String> itaff = affs.iterator(); //gauche 
		Iterator<Expr> itexpr = exprs.iterator(); //droit

		int i = 0;
		String afff, exprr;

		//Evaluation du coté droit d'abord
		while(itexpr.hasNext()) {
			Expr e = itexpr.next();
			compile(e, f); // compile de l'expression
			
			List<String> list = codeI.inlineExpression(this, f);
			
			EObject x = e.getExpr();
			if(x instanceof ExprCons) {
				compile((ExprCons)x, f);
			}
			else if(x instanceof ExprSimple) {
				compile((ExprSimple)x, f);
			}
//			else if(x instanceof ExprSimple) {
//				compile((ExprSimple)x, f);
//			}
			System.out.println("Liste inline : "+list);
			System.out.println("this : "+ this.getFunList());
			Iterator<String> it = list.iterator();
			while(it.hasNext()) {
				exprr = VAR_PREFIXE + (i++);
				afff = it.next();
				varDeclaration3Addr(f, exprr);
				codeI.aff(exprr, afff);
			}
		}
		i = 0;

		//gestion du coté gauche
		while(itaff.hasNext()) {
			exprr = itaff.next();
			afff = VAR_PREFIXE + (i++);
			f.updateWriteVar(exprr);
			varDeclaration3Addr(f, afff);
			codeI.aff(exprr, afff);
		}
	}
	
	
	private void compile(ExprCons cons, FunctionDef f){
//		cons.ge
	}

	//Expr
	private void compile(Expr exp, FunctionDef f) {
		codeI.addLevel();
		ExprSimple exprS = (ExprSimple) exp.getExpr();
		if(exprS != null) {
			compile(exprS, f);
		}
		//codeI.subLevel();
	}

	private void compile(ExprSimple expr, FunctionDef f) {
		String val = expr.getVar(); // variable simple
		String sym = expr.getSym();
//		String operator = "";

		if(val != null) {
			f.updateReadVar(val);
			varDeclaration3Addr(f, val);
			codeI.addToExpression(val, listFunction);
		}
		if(sym != null) {
			symboles.put(sym, "");
		}

	}

	public Map<String, FunctionDef> getFunList() {
		return listFunction;
	}

	public Map<String, String> getSymbs() {
		return symboles;
	}

	public CodeIntermediaire getCode3Addresses() {
		return codeI;
	}
	

	private void displaySymTable() {
		System.out.println();
		System.out.println("Symboles globaux : \n" + symboles.keySet() + "\n");
		for (String f : listFunction.keySet()) {
			System.out.println(f + " : " + listFunction.get(f) + "\n");
		}
		System.out.println("Symboles Table correctly generated.");
//		if(DISPLAY_XML_TABLE){
//			System.out.println("\n" + writeSymTableXML(OUTPUT_XML_FILE));
//		}
	}
}
