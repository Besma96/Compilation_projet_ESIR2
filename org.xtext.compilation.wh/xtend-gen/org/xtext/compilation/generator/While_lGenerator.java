/**
 * generated by Xtext 2.15.0
 */
package org.xtext.compilation.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.compilation.while_l.Affect;
import org.xtext.compilation.while_l.Command;
import org.xtext.compilation.while_l.Commands;
import org.xtext.compilation.while_l.Expr;
import org.xtext.compilation.while_l.ExprAnd;
import org.xtext.compilation.while_l.ExprCons;
import org.xtext.compilation.while_l.ExprEq;
import org.xtext.compilation.while_l.ExprHd;
import org.xtext.compilation.while_l.ExprList;
import org.xtext.compilation.while_l.ExprNot;
import org.xtext.compilation.while_l.ExprOr;
import org.xtext.compilation.while_l.ExprSimple;
import org.xtext.compilation.while_l.ExprSym;
import org.xtext.compilation.while_l.ExprTl;
import org.xtext.compilation.while_l.For;
import org.xtext.compilation.while_l.Function;
import org.xtext.compilation.while_l.If;
import org.xtext.compilation.while_l.Nop;
import org.xtext.compilation.while_l.Program;
import org.xtext.compilation.while_l.While;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class While_lGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String name_file, final int global_indent, final int if_indent, final int for_indent, final int while_indent, final int aff_indent) {
    Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
    for (final Program r : _filter) {
      fsa.generateFile(name_file, 
        this.compile(r, global_indent, if_indent, for_indent, while_indent, aff_indent));
    }
  }
  
  public CharSequence compile(final Program p, final int global_indent, final int if_indent, final int for_indent, final int while_indent, final int aff_indent) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Function> _functions = p.getFunctions();
      for(final Function f : _functions) {
        CharSequence _compile = this.compile(f, global_indent, if_indent, for_indent, while_indent, aff_indent);
        _builder.append(_compile);
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Function f, final int global_indent, final int if_indent, final int for_indent, final int while_indent, final int aff_indent) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = f.getName();
    _builder.append(_name);
    _builder.append(":");
    _builder.newLineIfNotEmpty();
    _builder.append("read ");
    {
      EList<String> _vars = f.getDefinition().getInput().getVars();
      boolean _hasElements = false;
      for(final String e : _vars) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append(e);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    String _compile = this.compile(f.getDefinition().getCommands(), global_indent, if_indent, for_indent, while_indent, aff_indent);
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("write ");
    {
      EList<String> _vars_1 = f.getDefinition().getOutput().getVars();
      boolean _hasElements_1 = false;
      for(final String e_1 : _vars_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append(e_1);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public String compile(final Commands cs, final int global_indent, final int if_indent, final int for_indent, final int while_indent, final int aff_indent) {
    int size = cs.getCommands().size();
    String res = "";
    EList<Command> _commands = cs.getCommands();
    for (final Command c : _commands) {
      if ((size == 1)) {
        String _res = res;
        String _compile = this.compile(c, global_indent, if_indent, for_indent, while_indent, aff_indent);
        String _plus = (_compile + "");
        res = (_res + _plus);
      } else {
        String _res_1 = res;
        String _compile_1 = this.compile(c, global_indent, if_indent, for_indent, while_indent, aff_indent);
        String _plus_1 = (_compile_1 + ";\n");
        res = (_res_1 + _plus_1);
        size--;
      }
    }
    return res;
  }
  
  public String compile(final Command c, final int global_indent, final int if_indent, final int for_indent, final int while_indent, final int aff_indent) {
    EObject _cmd = c.getCmd();
    if ((_cmd instanceof If)) {
      String indentation = "";
      for (int i = 0; (i < (global_indent + if_indent)); i++) {
        String _indentation = indentation;
        indentation = (_indentation + "\t");
      }
      EObject _cmd_1 = c.getCmd();
      Commands _commands2 = ((If) _cmd_1).getCommands2();
      boolean _tripleNotEquals = (_commands2 != null);
      if (_tripleNotEquals) {
        EObject _cmd_2 = c.getCmd();
        Object _compile = this.compile(((If) _cmd_2).getExpr());
        String _plus = ((indentation + "if") + _compile);
        String _plus_1 = (_plus + "then\n");
        EObject _cmd_3 = c.getCmd();
        Object _compile_1 = this.compile(((If) _cmd_3).getCommands1(), global_indent, if_indent, for_indent, while_indent, aff_indent);
        String _plus_2 = (_plus_1 + _compile_1);
        String _plus_3 = (_plus_2 + "\n");
        String _plus_4 = (_plus_3 + indentation);
        String _plus_5 = (_plus_4 + "else\n");
        EObject _cmd_4 = c.getCmd();
        Object _compile_2 = this.compile(((If) _cmd_4).getCommands2(), global_indent, if_indent, for_indent, while_indent, aff_indent);
        String _plus_6 = (_plus_5 + _compile_2);
        String _plus_7 = (_plus_6 + "\n");
        String _plus_8 = (_plus_7 + indentation);
        return (_plus_8 + "fi");
      } else {
        EObject _cmd_5 = c.getCmd();
        Object _compile_3 = this.compile(((If) _cmd_5).getExpr());
        String _plus_9 = ((indentation + "if") + _compile_3);
        String _plus_10 = (_plus_9 + "then\n");
        EObject _cmd_6 = c.getCmd();
        Object _compile_4 = this.compile(((If) _cmd_6).getCommands1(), global_indent, if_indent, for_indent, while_indent, aff_indent);
        String _plus_11 = (_plus_10 + _compile_4);
        String _plus_12 = (_plus_11 + "\n");
        String _plus_13 = (_plus_12 + indentation);
        return (_plus_13 + "fi");
      }
    }
    EObject _cmd_7 = c.getCmd();
    if ((_cmd_7 instanceof For)) {
      String indentation_1 = "";
      for (int i = 0; (i < (global_indent + for_indent)); i++) {
        String _indentation = indentation_1;
        indentation_1 = (_indentation + "\t");
      }
      EObject _cmd_8 = c.getCmd();
      Object _compile_5 = this.compile(((For) _cmd_8).getExpr());
      String _plus_14 = ((indentation_1 + "for ") + _compile_5);
      String _plus_15 = (_plus_14 + " do\n");
      EObject _cmd_9 = c.getCmd();
      Object _compile_6 = this.compile(((For) _cmd_9).getCmds(), global_indent, if_indent, for_indent, while_indent, aff_indent);
      String _plus_16 = (_plus_15 + _compile_6);
      String _plus_17 = (_plus_16 + "\n");
      String _plus_18 = (_plus_17 + indentation_1);
      return (_plus_18 + "od");
    }
    EObject _cmd_10 = c.getCmd();
    if ((_cmd_10 instanceof While)) {
      String indentation_2 = "";
      for (int i = 0; (i < (global_indent + while_indent)); i++) {
        String _indentation = indentation_2;
        indentation_2 = (_indentation + "\t");
      }
      EObject _cmd_11 = c.getCmd();
      Object _compile_7 = this.compile(((While) _cmd_11).getExpr());
      String _plus_19 = ((indentation_2 + "while ") + _compile_7);
      String _plus_20 = (_plus_19 + " do\n");
      EObject _cmd_12 = c.getCmd();
      Object _compile_8 = this.compile(((While) _cmd_12).getCmds(), global_indent, if_indent, for_indent, while_indent, aff_indent);
      String _plus_21 = (_plus_20 + _compile_8);
      String _plus_22 = (_plus_21 + "\n");
      String _plus_23 = (_plus_22 + indentation_2);
      return (_plus_23 + "od");
    }
    EObject _cmd_13 = c.getCmd();
    if ((_cmd_13 instanceof Nop)) {
      return "nop";
    }
    EObject _cmd_14 = c.getCmd();
    if ((_cmd_14 instanceof Affect)) {
      String indentation_3 = "";
      for (int i = 0; (i < (global_indent + aff_indent)); i++) {
        String _indentation = indentation_3;
        indentation_3 = (_indentation + "\t");
      }
      EObject _cmd_15 = c.getCmd();
      String _compile_9 = this.compile(((Affect) _cmd_15));
      return (indentation_3 + _compile_9);
    }
    return null;
  }
  
  public String compile(final Affect v) {
    final int size_vars = v.getVars().size();
    if ((size_vars == 1)) {
      String _get = v.getVars().get(0);
      String _plus = (_get + " := ");
      Object _compile = this.compile(v.getExprs().get(0));
      return (_plus + _compile);
    } else {
      String res = "";
      for (int i = 0; (i < (size_vars - 1)); i++) {
        String _res = res;
        String _get_1 = v.getVars().get(i);
        String _plus_1 = (_get_1 + " ,");
        res = (_res + _plus_1);
      }
      String _res = res;
      String _get_1 = v.getVars().get((size_vars - 1));
      String _plus_1 = (_get_1 + " := ");
      res = (_res + _plus_1);
      final int size_exprs = v.getExprs().size();
      for (int i = 0; (i < (size_exprs - 1)); i++) {
        String _res_1 = res;
        Object _compile_1 = this.compile(v.getExprs().get(i));
        String _plus_2 = (_compile_1 + " ,");
        res = (_res_1 + _plus_2);
      }
      String _res_1 = res;
      Object _compile_1 = this.compile(v.getExprs().get((size_exprs - 1)));
      res = (_res_1 + _compile_1);
      return res;
    }
  }
  
  public Object compile(final Expr e) {
    EObject _expr = e.getExpr();
    if ((_expr instanceof ExprAnd)) {
      EObject _expr_1 = e.getExpr();
      Object _compile = this.compile(((ExprAnd) _expr_1).getArg1());
      String _plus = (_compile + "and");
      EObject _expr_2 = e.getExpr();
      Object _compile_1 = this.compile(((ExprAnd) _expr_2).getArg2());
      return (_plus + _compile_1);
    }
    EObject _expr_3 = e.getExpr();
    if ((_expr_3 instanceof ExprOr)) {
      EObject _expr_4 = e.getExpr();
      Object _compile_2 = this.compile(((ExprOr) _expr_4).getArg1());
      String _plus_1 = (_compile_2 + "or");
      EObject _expr_5 = e.getExpr();
      Object _compile_3 = this.compile(((ExprOr) _expr_5).getArg2());
      return (_plus_1 + _compile_3);
    }
    EObject _expr_6 = e.getExpr();
    if ((_expr_6 instanceof ExprSimple)) {
      EObject _expr_7 = e.getExpr();
      return this.compile(((ExprSimple) _expr_7));
    }
    EObject _expr_8 = e.getExpr();
    if ((_expr_8 instanceof ExprCons)) {
      EObject _expr_9 = e.getExpr();
      Object _compile_4 = this.compile(((ExprCons) _expr_9).getArg1());
      String _plus_2 = (("(" + "cons") + _compile_4);
      EObject _expr_10 = e.getExpr();
      Object _compile_5 = this.compile(((ExprCons) _expr_10).getArg2());
      String _plus_3 = (_plus_2 + _compile_5);
      return (_plus_3 + ")");
    }
    EObject _expr_11 = e.getExpr();
    if ((_expr_11 instanceof ExprList)) {
      EObject _expr_12 = e.getExpr();
      final int size = ((ExprList) _expr_12).getArg().size();
      if ((size == 1)) {
        EObject _expr_13 = e.getExpr();
        Object _compile_6 = this.compile(((ExprList) _expr_13).getArg().get(0));
        String _plus_4 = (("(" + "list") + _compile_6);
        return (_plus_4 + ")");
      } else {
        String res = ("(" + "list");
        for (int i = 0; (i < (size - 1)); i++) {
          String _res = res;
          EObject _expr_14 = e.getExpr();
          Object _compile_7 = this.compile(((ExprList) _expr_14).getArg().get(i));
          String _plus_5 = (_compile_7 + "; à completer");
          res = (_res + _plus_5);
        }
        String _res = res;
        EObject _expr_14 = e.getExpr();
        Object _compile_7 = this.compile(((ExprList) _expr_14).getArg().get((size - 1)));
        String _plus_5 = (_compile_7 + ")");
        res = (_res + _plus_5);
        EObject _expr_15 = e.getExpr();
        this.compile(((ExprList) _expr_15).getArg().get(0));
      }
    }
    EObject _expr_16 = e.getExpr();
    if ((_expr_16 instanceof ExprHd)) {
      EObject _expr_17 = e.getExpr();
      Object _compile_8 = this.compile(((ExprHd) _expr_17).getArg());
      String _plus_6 = (("(" + "hd") + _compile_8);
      /* (_plus_6 + ")"); */
    }
    EObject _expr_18 = e.getExpr();
    if ((_expr_18 instanceof ExprTl)) {
      EObject _expr_19 = e.getExpr();
      Object _compile_9 = this.compile(((ExprTl) _expr_19).getArg());
      String _plus_7 = (("(" + "Tl") + _compile_9);
      /* (_plus_7 + ")"); */
    }
    EObject _expr_20 = e.getExpr();
    if ((_expr_20 instanceof ExprSym)) {
      EObject _expr_21 = e.getExpr();
      final int size_1 = ((ExprSym) _expr_21).getArg2().size();
      if ((size_1 == 1)) {
        EObject _expr_22 = e.getExpr();
        String _arg1 = ((ExprSym) _expr_22).getArg1();
        String _plus_8 = ("(" + _arg1);
        EObject _expr_23 = e.getExpr();
        Object _compile_10 = this.compile(((ExprSym) _expr_23).getArg2().get(0));
        String _plus_9 = (_plus_8 + _compile_10);
        return (_plus_9 + ")");
      } else {
        EObject _expr_24 = e.getExpr();
        String _arg1_1 = ((ExprSym) _expr_24).getArg1();
        String res_1 = ("(" + _arg1_1);
        for (int i = 0; (i < (size_1 - 1)); i++) {
          String _res_1 = res_1;
          EObject _expr_25 = e.getExpr();
          Object _compile_11 = this.compile(((ExprSym) _expr_25).getArg2().get(i));
          String _plus_10 = (_compile_11 + "à completé");
          res_1 = (_res_1 + _plus_10);
        }
        String _res_1 = res_1;
        EObject _expr_25 = e.getExpr();
        Object _compile_11 = this.compile(((ExprSym) _expr_25).getArg2().get((size_1 - 1)));
        String _plus_10 = (_compile_11 + ")");
        res_1 = (_res_1 + _plus_10);
        return res_1;
      }
    }
    EObject _expr_26 = e.getExpr();
    if ((_expr_26 instanceof ExprNot)) {
      EObject _expr_27 = e.getExpr();
      String _compile_12 = this.compile(((ExprNot) _expr_27).getArg1());
      return ("not" + _compile_12);
    }
    return null;
  }
  
  public Object compile(final ExprSimple e) {
    String _nameFunction = e.getNameFunction();
    boolean _tripleNotEquals = (_nameFunction != null);
    if (_tripleNotEquals) {
      return null;
    }
    return null;
  }
  
  public String compile(final ExprEq e) {
    Object _compile = this.compile(e.getArg1());
    String _plus = (_compile + "=?");
    Object _compile_1 = this.compile(e.getArg2());
    return (_plus + _compile_1);
  }
}
