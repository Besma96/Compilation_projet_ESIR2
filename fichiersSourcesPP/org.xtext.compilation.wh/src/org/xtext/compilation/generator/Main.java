/*
 * generated by Xtext 2.15.0
 */
package org.xtext.compilation.generator;

import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.xtext.compilation.While_lStandaloneSetup;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

public class Main {
	
	private static int DEFAULT_INDENT = 1;
	
	private static int IF_INDENT = DEFAULT_INDENT;
	private static int AFF_INDENT = DEFAULT_INDENT;
	private static int WHILE_INDENT = DEFAULT_INDENT;
	private static int FOR_INDENT = DEFAULT_INDENT;
	
	private static String DEFAULT_NAME = "sth.whpp";
	private static String inputFileName = "test.wh";
private static String outputFileName = DEFAULT_NAME;

	public static void main(String[] args) throws Exception  {
//		if (args.length == 0) {
//			//System.err.println("Aborting: no path to EMF resource provided!");
//			WhileMan();
//			return;
//		}
		Injector injector = new While_lStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		main.runGenerator(inputFileName, outputFileName);
		optionManager(args);
//		System.out.println("arg 1 "+args[0]+" arg2 "+ args[1]);
//		if(args.length == 1) { // si le user n'entre que le nom du fichier d'entrée on lui met le nom de son 
//								// fichier d'entrée auquel on ajoute le mot "result"
//			args[1] =outputFileName;
//		}
//		main.runGenerator(args[0], args[1]);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private GeneratorDelegate generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String inputfile, String outputfile) throws Exception {
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createFileURI(inputfile), true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				//System.err.println(issue);
				throw new Exception(issue.getMessage());
			}
			return;
		}

		// Configure and start the generator
		fileAccess.setOutputPath("src-gen/");
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		
		//Initialisation du generator
		While_lGenerator while_l = new While_lGenerator();
		while_l.doGenerate(resource, fileAccess, context, outputfile, DEFAULT_INDENT, IF_INDENT, FOR_INDENT, WHILE_INDENT, AFF_INDENT );

		
		
		
		
		
		System.out.println("Code generation finished.");
	}
	
	/***************************  partie de la gestion du man *********************/
	//TODO
	private static void WhileMan()
	   {
			String separation = "\n\n";
			String man = "";
			String NAME = "\twhpp - While Pretty Printer";
			String SYNOPSIS = "\twhpp [OPTIONS] inputFileName OutputFileName";
			String DESCRIPTION = "\twhpp permet de pretty printer un fichier(inputFileName) contenant un program While(extension wh) "
					+ "\técrit de manière brute et le renvoie dans le fichier OutputFileName";
			String OPTIONS = "\t\t-o, --output file\n\t\t\tnom du fichier de sortie\n"
					+ "\t\t-h, --help\n\t\t\tAffiche l'aide";
			String BUGS = "";
			String SEE_ALSO = "";
			String AUTHORS = "\tEcrit par Besma Kaouane - Daouda Barry - Oumar Ballo - Roland Kouassi - Mohammed Hrouch - Salome Jarnouen";
			
			man = "NOM\n"+NAME+separation+"SYNOPSIS\n"+SYNOPSIS+separation+"DESCRIPTION\n"+DESCRIPTION+separation+"OPTIONS\n"+OPTIONS+separation+"BUGS\n"
					+BUGS+separation+"AUTEURS\n"+AUTHORS+separation+"VOIR AUSSI\n"+SEE_ALSO;
			System.out.println(man);
	}
	
	private static void optionManager(String[] args) {
		if(args.length == 1) {
			
		}
		//parcours du tableau des arguments et appel des différentes fonction des options définies plus bas mon gars
		int size = args.length;
		switch(size) {
			case 3  : //fichier input et une option à gérer
			case 5  : //fichier input et deux options
			case 7  :	//fichier input et 3 options
			case 9  :	//fichier input et 4 options
			case 11 :	//fichier input et 5 options
			case 13 :	//fichier input et 6 options
		}
	}
	
	/**
	 * Fonction qui permet de vérifier la validité d'une option passée en paramètre au pretty printer
	 * @param option
	 * @return true si l'option est valide, false sinon
	 */
	private static boolean valideOption(String option) {
		String [] options = {"-o", "-if", "-for", "-while", "-aff", "-d"};
		for(int i = 0; i < options.length; i++) {
			if(option.equals(options[i])) {
				return true;
			}
		}
		return false;
	}
	
	private static void if_indent(String if_option, String indent) {
		if(valideOption(if_option)) {
			if(if_option.equals("-if")) {
				IF_INDENT = Integer.parseInt(indent);
			}
		}
	}
	
	private static void output_indent(String output_option, String outputFileName) {
		if(valideOption(output_option)) {
			if(output_option.equals("-o")) {
				DEFAULT_NAME = outputFileName;
			}
		}
	}
	
	private static void for_indent(String for_option, String indent) {
		if(valideOption(for_option)) {
			if(for_option.equals("-for")) {
				FOR_INDENT = Integer.parseInt(indent);
			}
		}
	}
	
	private static void while_indent(String while_option, String indent) {
		if(valideOption(while_option)) {
			if(while_option.equals("-while")) {
				WHILE_INDENT = Integer.parseInt(indent);
			}
		}
	}
	
	private static void aff_indent(String aff_option, String indent) {
		if(valideOption(aff_option)) {
			if(aff_option.equals("-aff")) {
				AFF_INDENT = Integer.parseInt(indent);
			}
		}
	}
	
	private static void default_indent(String default_option, String indent) {
		if(valideOption(default_option)) {
			if(default_option.equals("-d")) {
				DEFAULT_INDENT = Integer.parseInt(indent);
			}
		}
	}
	
	
}
