/*
 * generated by Xtext 2.15.0
 */
package org.xtext.compilateur.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.compilateur.grammarWhile.Definition
import org.xtext.compilateur.grammarWhile.Input
import org.xtext.compilateur.grammarWhile.Commands
import org.xtext.compilateur.grammarWhile.Output
import org.xtext.compilateur.grammarWhile.Command
import org.xtext.compilateur.grammarWhile.If
import org.xtext.compilateur.grammarWhile.Nop

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GrammarWhileGenerator extends AbstractGenerator {

	SymboleTable symtab=new SymboleTable();
	VariableTable vartab=new VariableTable();
	Code3Address code3=new Code3Address();
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context
		
	) {

	}
	def doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context,
					String name_file){
						
		for(r:resource.allContents.toIterable.filter(Definition))
		{
			fsa.generateFile(name_file,r.compile());
		}

}

	def compile(Definition d){
		symtab.addSymbole('read');
		compile(d.input);
		symtab.addSymbole('%');
		compile(d.commands);
		symtab.addSymbole('%');
		symtab.addSymbole('%');
		compile(d.output);
	}
	
	def compile(Input i){
		val size=i.vars.size;
			
		for(var j=0;j<size;j++){
			vartab.addVariable(i.vars.get(j))
		}	
		
	}
	
	def compile(Commands cs){
		val size=cs.commands.size;
		
		for(var i=0;i<size;i++){
			cs.commands.get(i).compile();
		}
	}
	def compile(Output o){
		val size=o.vars.size;
			
		for(var j=0;j<size;j++){
			vartab.addVariable(o.vars.get(j))
		}
	}
	def compile(Command c){
		if(c.cmd instanceof Nop){
			code3.Add(new Quadruplet(OP.Nop,"","",""));
		}
	}
	
}
