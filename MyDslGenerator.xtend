/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Function
import org.xtext.example.mydsl.myDsl.Program
import org.xtext.example.mydsl.myDsl.Commands
import org.xtext.example.mydsl.myDsl.Command
import org.xtext.example.mydsl.myDsl.If
import org.xtext.example.mydsl.myDsl.For
import org.xtext.example.mydsl.myDsl.While
import org.xtext.example.mydsl.myDsl.Nop
import org.xtext.example.mydsl.myDsl.Affect
import org.xtext.example.mydsl.myDsl.Expr

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
 	int nbfunctions=0;
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
	}
	def doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context,
					String name_file,int global_indent,int if_indent,int for_indent,
					int while_indent,int for_each_indent,int aff_indent
	)
	{
		for(r:resource.allContents.toIterable.filter(Program)){
			fsa.generateFile(name_file,r.compile(global_indent,if_indent,for_indent,while_indent,
							 for_each_indent,aff_indent
			))	
		}
	}
	
	def compile(Program p,int global_indent,int if_indent,int for_indent,int while_indent,
				int for_each_indent,int aff_indent
	){
		'''
		«FOR f:p.functions»
		«f.compile(global_indent,if_indent,for_indent,while_indent,for_each_indent,aff_indent)»	
		«ENDFOR»
		'''
		
	}
	def compile(Function f,int global_indent,int if_indent,int for_indent,int while_indent,
				int for_each_indent,int aff_indent
	){
		
		'''
			function«f.name»:
			read «FOR e: f.definition.input.vars SEPARATOR ','»«e»«ENDFOR»
			%
			«f.definition.commands.compile(global_indent,if_indent,for_indent,while_indent,for_each_indent,aff_indent)»
			%
			write«FOR e: f.definition.output.vars SEPARATOR ','»«e»«ENDFOR»
			
		'''
		

	}
	def compile(Commands cs,int global_indent,int if_indent,int for_indent,int while_indent,int aff_indent
	)
	{
		var size=cs.commands.size;
		var res="";
		for(Command c :cs.commands)
		{
			if(size==1)
			{
				res+=c.compile(global_indent,if_indent,for_indent,while_indent,aff_indent)+"";	
			}
			else
			{
				res+=c.compile(global_indent,if_indent,for_indent,while_indent,aff_indent)+"\n";
				size--;
			}
		}
	return res; 
	}
	def compile(Command c,int global_indent,int if_indent,int for_indent,int while_indent,int aff_indent
	)
	{
		if(c.cmd instanceof If){
			
			var indentation="";
			for(var i=0;i<(2+if_indent);i++){
				indentation+="\t";
			}
			
		if((c.cmd as If).commands2 !== null){
			return indentation+"if"+(c.cmd as If).expr.compile(global_indent,if_indent,for_indent,while_indent,
				aff_indent
			)+"then\n"+(c.cmd as If).commands1.compile(global_indent,
						if_indent,for_indent,while_indent,aff_indent)+"\n"+indentation
						+"else\n"+(c.cmd as If).commands2.compile(global_indent,if_indent,for_indent,while_indent,
							aff_indent)+"\n"+indentation+"fi";
						}
		else{
			return indentation+"if"+(c.cmd as If).expr.compile(global_indent,if_indent,for_indent,while_indent,aff_indent)+"then\n"+(c.cmd as If).commands1.compile(global_indent,
						if_indent,for_indent,while_indent,aff_indent)+"\n"+indentation+"fi"
		}
			
		}
		if(c.cmd instanceof For){
			var indentation="";
			for(var i=0;i<(2+for_indent);i++){
				indentation+="\t";
			}
		return indentation+"for"+(c.cmd as For).expr.compile(global_indent,if_indent,for_indent,while_indent,
									aff_indent)+"do\n"+(c.cmd as For).cmds.compile(global_indent,if_indent,for_indent,while_indent										
									)+"\n"+indentation+"od"
		
		}
		if(c.cmd instanceof While){
			var indentation="";
			for(var i=0;i<(2+while_indent);i++){
				indentation+="\t";
			}
		return indentation+"for"+(c.cmd as While).expr.compile(global_indent,if_indent,for_indent,while_indent,
									aff_indent)+"do\n"+(c.cmd as While).cmds.compile(global_indent,if_indent,for_indent,while_indent,
										aff_indent)+"\n"+indentation+"od"
			
		}
		if(c.cmd instanceof Nop){
			return "nop"
		}
		/*if( c.cmd instanceof Affect){
		var indentation="";
			for(var i=0;i<(2+aff_indent);i++){
				indentation+="\t";
			}
		return indentation+(c.cmd as Affect).compile
		
		}*/
	}
	
	def compile(Expr e,int global_indent,int if_indent,int for_indent,int while_indent,
				int for_each_indent,int aff_indent
	){
		
	}
	def compile(Affect v,int global_indent,int if_indent,int for_indent,int while_indent,
				int for_each_indent,int aff_indent
	)
	{
		
	}
}
