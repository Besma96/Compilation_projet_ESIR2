/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Function
import org.xtext.example.mydsl.myDsl.Program

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
 	int nbfunctions=0;
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
	}
	def doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context,
					String name_file,int global_indent,int if_indent,int for_indent,
					int while_indent,int for_each_indent,int aff_indent
	)
	{
		for(r:resource.allContents.toIterable.filter(Program)){
			fsa.generateFile(name_file,r.compile(global_indent,if_indent,for_indent,while_indent,
							 for_each_indent,aff_indent
			))	
		}
	}
	
	def compile(Program p,int global_indent,int if_indent,int for_indent,int while_indent,
				int for_each_indent,int aff_indent
	){
		'''
		«FOR f:p.functions»
		«f.compile(global_indent,if_indent,for_indent,while_indent,for_each_indent,aff_indent)»	
		«ENDFOR»
		'''
		
	}
	def compile(Function f,int global_indent,int if_indent,int for_indent,int while_indent,
				int for_each_indent,int aff_indent
	){
		if(nbfunctions==0){
		'''
		function «f.name»:
		read «FOR e: f.definition.input.vars»
		'''			

		}

	} 
}
