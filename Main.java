/*
 * generated by Xtext 2.15.0
 */
package org.xtext.compilation.generator;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.xtext.compilation.While_lStandaloneSetup;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

public class Main {
    
    private static int DEFAULT_INDENT = 2;
    private static int IF_INDENT = DEFAULT_INDENT;
    private static int AFF_INDENT = DEFAULT_INDENT;
    private static int WHILE_INDENT = DEFAULT_INDENT;
    private static int FOR_INDENT = DEFAULT_INDENT;
    private static int FOREACH_INDENT = DEFAULT_INDENT;
    
    private static String DEFAULT_NAME = "sth.whpp";
//    private static String inputFileName = "test.wh";
//private static String outputFileName = DEFAULT_NAME;

    public static void main(String[] args) throws Exception  {
        if (args.length == 0) {
            System.err.println("Aborting: no path to EMF resource provided!");
            return;
        }
        if(args[0].equals("-help")) {
        	printhelp(); 
        	return ;
        }
        Injector injector = new While_lStandaloneSetup().createInjectorAndDoEMFRegistration();
        Main main = injector.getInstance(Main.class);
//        main.runGenerator(inputFileName, outputFileName);
        //System.out.println("arg 1 "+args[0]+" arg2 "+ args[1]);
        main.runGenerator(args);
    }

    @Inject
    private Provider<ResourceSet> resourceSetProvider;

    @Inject
    private IResourceValidator validator;

//    @Inject
//    private GeneratorDelegate generator;

    @Inject
    private JavaIoFileSystemAccess fileAccess;

    protected void runGenerator(String [] args) throws Exception {
        boolean sortie = optionManager(args);  
        if(sortie) {
        	printhelp();
        	return; // si c'est l'option help on l'affiche et on sort du programme
        }
        // Load the resource
        ResourceSet set = resourceSetProvider.get();
        Resource resource = set.getResource(URI.createFileURI(args[0]), true);

        // Validate the resource
        List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
        if (!list.isEmpty()) {
            for (Issue issue : list) {
               // System.err.println(issue);
                System.err.println("Impossible de trouver ou de lire le fichier source");
            }
            return;
        }

        // Configure and start the generator
        fileAccess.setOutputPath("./");
        GeneratorContext context = new GeneratorContext();
        context.setCancelIndicator(CancelIndicator.NullImpl);
        
        //Initialisation du generator
        While_lGenerator while_l = new While_lGenerator();
        while_l.doGenerate(resource, fileAccess, context, DEFAULT_NAME, DEFAULT_INDENT, IF_INDENT,
        FOR_INDENT, WHILE_INDENT, FOREACH_INDENT );

        System.out.println("Code generation finished.");
    }
    
    private static boolean valideOption(String option) {
        String [] options = {"-if", "-for", "-while", "-o", "-all", "-foreach", "-help"};
        for(int i = 0; i < options.length; i++) {
            if(options[i].equals(option)) {
                return true;
            }
        }
        return false;
    }
    
    private static void if_option(String if_option, String indent) {
        if(valideOption(if_option) && if_option.equals("-if")) {
            IF_INDENT = Integer.parseInt(indent);
        }
    }
    
    private static void all_option(String all_option, String indent) {
        //boolean bool = false;
        if(valideOption(all_option) && all_option.equals("-all")) {
            DEFAULT_INDENT = Integer.parseInt(indent);
        }
    }
    
    private static void for_option(String for_option, String indent) {
        if(valideOption(for_option) && for_option.equals("-for")) {
            FOR_INDENT = Integer.parseInt(indent);
        }
    }
    
    private static void foreach_option(String foreach_option, String indent) {
            if(valideOption(foreach_option) && foreach_option.equals("-foreach")) {
                FOREACH_INDENT = Integer.parseInt(indent);
            }
        }
    
    private static void while_option(String while_option, String indent) {
        if(while_option.equals("-while")) {
            WHILE_INDENT = Integer.parseInt(indent);
        }
    }
    
    private static void output_option(String output_option, String indent) {
        if(valideOption(output_option) && output_option.equals("-o")) {
            DEFAULT_NAME = indent;
        }
    }
    
    public static boolean optionManager(String [] args) {
        int size = args.length;
        
        for(int i = 0; i < size-1; i++) {
            if(valideOption(args[i]) && !args[i].equals("-help")) {
                while_option(args[i], args[i+1]);
                for_option(args[i], args[i+1]);
                if_option(args[i], args[i+1]);
                all_option(args[i], args[i+1]);
                output_option(args[i], args[i+1]);
                foreach_option(args[i], args[i+1]);
            }
            else if(args[i].equals("-help")) {
            	return true;
            }
            else if(args[i].charAt(0) == '-') {
            	System.out.println("Option non valide : tapez whpp -help pour consulter l'aide");
            	return false;
            }
        }
		return false;
    }
    
    private static void printhelp()  {
    	InputStream flux;
		try {
			flux = new FileInputStream("help.txt");
			InputStreamReader lecture=new InputStreamReader(flux);
	    	BufferedReader buff=new BufferedReader(lecture);
	    	String laLigne;
	    	try {
				while((laLigne = buff.readLine()) !=null) {
				    System.out.println(laLigne);
				}
				buff.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} 
    	
    }
    
    
}
